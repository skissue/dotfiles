;;; -*- mode: lisp-data; -*-

(defwindow bar
           :monitor 0
           :geometry (geometry :x "8px"
                               :y "0%"
                               :anchor "center left")
           :stacking "fg"
           :exclusive true
           (box
            :class "bar"
            :orientation "vertical"
            :hexpand true
            (workspaces)
            (bar-bottom)))

(deflisten niri-workspaces "niri-workspaces")
(defwidget workspaces []
           (box
            :class "workspaces"
            :orientation "vertical"
            :space-evenly false
            (for ws in {niri-workspaces}
                 (button
                  :class "ws ${ws.is_active ? "active" : ""} ${ws.is_focused ? "focused" : ""}"
                  :onclick "niri msg action focus-workspace -- ${ws.idx}"
                  {ws.active_window_id != "null" || ws.is_focused ? "●" : "○"}))))

(defwidget bar-bottom []
           (box
            :class "bar-bottom"
            :space-evenly false
            :orientation "vertical"
            :hexpand true
            :valign "end"
            (music)
            (battery)
            (tray)
            (time)))

(deflisten mpris `playerctl metadata --follow --format '{"player": "{{ playerName }}", "artist": "{{ artist }}", "title": "{{ title }}", "position": "{{ position }}", "position_human": "{{ duration(position) }}", "length": "{{ mpris:length }}","length_human": "{{ duration(mpris:length) }}", "status": "{{ status }}"}'`)
(defwidget music []
           (button
            :visible {mpris != ""}
            :onclick "playerctl play-pause"
            :tooltip "${mpris?.artist} — ${mpris?.title}"
            (box
             :space-evenly false
             :orientation "vertical"
             (circular-progress
              :value {mpris == "" ? 0 : mpris.position / mpris.length * 100}
              :height 30
              :start-at 75
              :thickness 2.0
              :clockwise true
              (label :class "icon" :text {mpris?.status == "Playing" ? "" : ""}))
             (label :class "icon" :text ""))))

(defwidget battery []
           (box
            :visible {EWW_BATTERY != ""}
            :space-evenly false
            :orientation "vertical"
            :tooltip "${round(EWW_BATTERY?.total_avg ?: 0, 0)}%"
            (label :class "icon ${(EWW_BATTERY?.total_avg ?: 0) < 20 ? "red" : ""} ${EWW_BATTERY?.BAT1?.status == "Discharging" ? "" : "green"}"
                   :text {"[\"\",\"\",\"\",\"\",\"\",\"\"]"[round((EWW_BATTERY?.total_avg ?: 0) / 20, 0)]})))

(defwidget tray []
           (systray :class "tray vertical"
                    :hexpand true
                    :orientation "vertical"))

(defwidget time []
           (box
            :class "time"
            :orientation "vertical"
            :space-evenly false
            :tooltip {formattime(EWW_TIME, "%B %d, %Y")}
            {formattime(EWW_TIME, "%H")}
            {formattime(EWW_TIME, "%M")}
            {formattime(EWW_TIME, "%S")}))
